# HG changeset patch
# Parent 4bdc75f1c01300d993b5bb399935324f9f7bb852
# User Joe Walker <jwalker@mozilla.com>
Bug 694932 - GCLI should make the same JS security checks as JSTerm

diff --git a/browser/devtools/webconsole/HUDService.jsm b/browser/devtools/webconsole/HUDService.jsm
--- a/browser/devtools/webconsole/HUDService.jsm
+++ b/browser/devtools/webconsole/HUDService.jsm
@@ -6929,7 +6929,7 @@ function GcliTerm(aContentWindow, aHudId
     chromeDocument: this.document,
     contentDocument: aContentWindow.document,
     jsEnvironment: {
-      globalObject: aContentWindow,
+      globalObject: unwrap(aContentWindow),
       evalFunction: this.evalInSandbox.bind(this)
     },
     inputElement: this.inputNode,
diff --git a/browser/devtools/webconsole/gcli.jsm b/browser/devtools/webconsole/gcli.jsm
--- a/browser/devtools/webconsole/gcli.jsm
+++ b/browser/devtools/webconsole/gcli.jsm
@@ -3176,9 +3176,6 @@ JavascriptType.prototype.parse = functio
   var typed = arg.text;
   var scope = globalObject;
 
-  // In FX-land we need to unwrap. TODO: Enable in the browser.
-  // scope = unwrap(scope);
-
   // Analyze the input text and find the beginning of the last part that
   // should be completed.
   var beginning = this._findCompletionBeginning(typed);
@@ -3210,12 +3207,11 @@ JavascriptType.prototype.parse = functio
                 l10n.lookup('jstypeParseScope'));
       }
 
-      // TODO: Re-enable this test
-      // Check if prop is a getter function on obj. Functions can change other
-      // stuff so we can't execute them to get the next object. Stop here.
-      // if (isNonNativeGetter(scope, prop)) {
-      //   return new Conversion(typed, arg);
-      // }
+      // Check if prop is a getter function on 'scope'. Functions can change
+      // other stuff so we can't execute them to get the next object. Stop here.
+      if (this._isNonNativeGetter(scope, prop)) {
+        return new Conversion(typed, arg);
+      }
 
       try {
         scope = scope[prop];
@@ -3436,7 +3432,7 @@ JavascriptType.prototype._findCompletion
 
 /**
  * Return true if the passed object is either an iterator or a generator, and
- * false otherwise.
+ * false otherwise
  * @param obj The object to check
  */
 JavascriptType.prototype._isIteratorOrGenerator = function(obj) {
@@ -3466,6 +3462,49 @@ JavascriptType.prototype._isIteratorOrGe
   return false;
 };
 
+/**
+ * Tells if the given property of the provided object is a non-native getter or
+ * not
+ * @param scope The object that contains the property
+ * @param prop The property you want to check if it is a getter or not
+ * @return True if the given property is a getter, false otherwise
+ */
+JavascriptType.prototype._isNonNativeGetter = function(scope, prop) {
+  if (typeof scope !== 'object') {
+    return false;
+  }
+
+  // Walk up the prototype chain of 'scope' looking for a property descriptor
+  // for 'prop'
+  var propDesc;
+  while (scope) {
+    try {
+      propDesc = Object.getOwnPropertyDescriptor(scope, prop);
+      if (propDesc) {
+        break;
+      }
+    }
+    catch (ex) {
+      // Native getters throw here. See bug 520882.
+      if (ex.name === 'NS_ERROR_XPC_BAD_CONVERT_JS' ||
+          ex.name === 'NS_ERROR_XPC_BAD_OP_ON_WN_PROTO') {
+        return false;
+      }
+      return true;
+    }
+    scope = Object.getPrototypeOf(scope);
+  }
+
+  if (propDesc) {
+    return false;
+  }
+
+  // 'prop' is a non native getter iff its property descriptor has a 'get'
+  // that is a function and that function does not have a prototype
+  return typeof propDesc.get === 'function' && !('prototype' in propDesc.get);
+};
+
+
 JavascriptType.prototype.name = 'javascript';
 
 exports.JavascriptType = JavascriptType;
